{:rename-macros {}, :renames {}, :use-macros {rename-keys clojure.set}, :excludes #{}, :name antizer.core, :imports nil, :requires {s clojure.string, clojure.string clojure.string, clojure.set clojure.set, w clojure.walk, clojure.walk clojure.walk, goog.object goog.object, cljsjs.antd cljsjs.antd}, :uses {getValueByKeys goog.object, rename-keys clojure.set}, :defs {antd-module {:name antizer.core/antd-module, :file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :line 8, :column 6, :end-line 8, :end-column 17}}, kebab-case->camel-case {:protocol-inline nil, :meta {:file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :line 10, :column 7, :end-line 10, :end-column 29, :arglists (quote ([input])), :doc "Converts from kebab case to camel case, eg: on-click to onClick"}, :name antizer.core/kebab-case->camel-case, :variadic false, :file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :end-column 29, :method-params ([input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input])), :doc "Converts from kebab case to camel case, eg: on-click to onClick"}, map-keys->camel-case {:protocol-inline nil, :meta {:file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :line 18, :column 7, :end-line 18, :end-column 27, :arglists (quote ([data & {:keys [html-props]}])), :doc "Stringifys all the keys of a cljs hashmap and converts them\n   from kebab case to camel case. If :html-props option is specified, \n   then rename the html properties values to their dom equivalent\n   before conversion", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(data {:keys [html-props]})], :arglists ([data & {:keys [html-props]}]), :arglists-meta (nil)}}, :name antizer.core/map-keys->camel-case, :variadic true, :file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(data {:keys [html-props]})], :arglists ([data & {:keys [html-props]}]), :arglists-meta (nil)}, :method-params [(data {:keys [html-props]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists ([data & {:keys [html-props]}]), :doc "Stringifys all the keys of a cljs hashmap and converts them\n   from kebab case to camel case. If :html-props option is specified, \n   then rename the html properties values to their dom equivalent\n   before conversion"}, get-module-path {:protocol-inline nil, :meta {:file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :line 35, :column 7, :end-line 35, :end-column 22, :arglists (quote ([module-name]))}, :name antizer.core/get-module-path, :variadic false, :file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :end-column 22, :method-params ([module-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([module-name]))}, get-prop {:protocol-inline nil, :meta {:file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :line 38, :column 7, :end-line 38, :end-column 15, :arglists (quote ([module-name prop])), :doc "Retreives the value of the module's property"}, :name antizer.core/get-prop, :variadic false, :file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :end-column 15, :method-params ([module-name prop]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([module-name prop])), :doc "Retreives the value of the module's property"}, call-js-func {:protocol-inline nil, :meta {:file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :line 44, :column 7, :end-line 44, :end-column 19, :arglists (quote ([func & args])), :doc "Calls a javascript function, converting the keys for any arguments \n   that are hashmaps from kebab case to camel case\n\n   * func - the native javascript to be called", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(func args)], :arglists ([func & args]), :arglists-meta (nil)}}, :name antizer.core/call-js-func, :variadic true, :file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(func args)], :arglists ([func & args]), :arglists-meta (nil)}, :method-params [(func args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists ([func & args]), :doc "Calls a javascript function, converting the keys for any arguments \n   that are hashmaps from kebab case to camel case\n\n   * func - the native javascript to be called"}, call-func {:protocol-inline nil, :meta {:file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :line 52, :column 7, :end-line 52, :end-column 16, :arglists (quote ([module-name & args])), :doc "Calls the ant module function", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(module-name args)], :arglists ([module-name & args]), :arglists-meta (nil)}}, :name antizer.core/call-func, :variadic true, :file "/Volumes/Personal/learn/ant-design/antizer-new/src/antizer/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(module-name args)], :arglists ([module-name & args]), :arglists-meta (nil)}, :method-params [(module-name args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists ([module-name & args]), :doc "Calls the ant module function"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:className :for :class :htmlFor :html-props}, :order [:html-props :class :for :className :htmlFor]}, :doc nil}